#!/usr/bin/env python

import datetime
import os
import requests

IMAGES_PATH = "/tmp/apodesktop/"


def getNumberOfMonitors():
    # assert we're using X
    assert "DISPLAY" in os.environ, "Not using X11"
    xrandrOutput = os.popen("xrandr").read()
    number_of_monitors = xrandrOutput.count(" connected")
    return number_of_monitors


def getAPODImageURLs(date, number_of_days_to_look_back):
    assert isinstance(date, datetime.datetime), "Date is not a datetime object"
    assert (
        number_of_days_to_look_back > 0
    ), "Number of days to look back is not positive"

    dateToCheck = date - datetime.timedelta(days=number_of_days_to_look_back)
    formattedDate = dateToCheck.strftime("%Y-%m-%d")
    apodURL = f"https://api.nasa.gov/planetary/apod?api_key=JvhDwQU1Uhv7yfaQTSqcsncZjwF5ZJR6McrzVE4f&start_date={formattedDate}"
    response = requests.get(apodURL)
    assert response.status_code == 200, "Failed to get APOD"

    responseJSON = response.json()
    assert isinstance(responseJSON, list), "APOD response is not a list"

    apodImageURLs = [
        entry["hdurl"] or entry["url"]
        for entry in responseJSON
        if entry["media_type"] == "image"
    ]
    assert len(apodImageURLs) > 0, "No APOD images found"

    # reverse the list so that the most recent image is first
    return list(reversed(apodImageURLs))


def downloadImages(apodImageURLs):
    assert len(apodImageURLs) > 0, "No APOD images to download"

    def downloadImage(apodImageURL, tempDir):
        imageName = apodImageURL.split("/")[-1]
        if os.path.exists(tempDir + "/" + imageName):
            return tempDir + "/" + imageName
        response = requests.get(apodImageURL)
        assert response.status_code == 200, "Failed to download image"
        assert (
            "image" in response.headers["Content-Type"]
        ), "Downloaded file is not an image"

        with open(tempDir + "/" + imageName, "wb") as imageFile:
            imageFile.write(response.content)
        return tempDir + "/" + imageName

    tempDir = IMAGES_PATH
    os.makedirs(tempDir, exist_ok=True)
    pathsToImages = [
        downloadImage(apodImageURL, tempDir) for apodImageURL in apodImageURLs
    ]
    return pathsToImages


def setWallpaper(pathsToImages):
    assert len(pathsToImages) > 0, "No images to set as wallpaper"
    assert "DISPLAY" in os.environ, "Not using X11"
    os.system("feh --bg-fill " + " ".join(pathsToImages))


def main():
    number_of_monitors = getNumberOfMonitors()
    assert number_of_monitors > 0, "No monitors detected"

    # look back two extra days in case the APOD is a video
    number_of_days_to_look_back = number_of_monitors + 2

    apodImageURLs = getAPODImageURLs(
        datetime.datetime.now(), number_of_days_to_look_back
    )
    assert len(apodImageURLs) > 0, "No APOD images found"

    pathsToImages = downloadImages(apodImageURLs)
    assert len(pathsToImages) > 0, "No images downloaded"

    setWallpaper(pathsToImages)

    return 0


if __name__ == "__main__":
    main()
